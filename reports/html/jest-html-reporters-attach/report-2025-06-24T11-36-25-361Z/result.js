window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":2,"numPassedTestSuites":0,"numPassedTests":7,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":9,"startTime":1750764986060,"success":false,"testResults":[{"numFailingTests":2,"numPassingTests":7,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750764989374,"loadTestEnvironmentEnd":1750764986498,"loadTestEnvironmentStart":1750764986418,"runtime":2874,"setupAfterEnvEnd":1750764986750,"setupAfterEnvStart":1750764986750,"setupFilesEnd":1750764986500,"setupFilesStart":1750764986500,"slow":false,"start":1750764986500},"testFilePath":"D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › create() › створює запис з правильними лімітами\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m25\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 |\u001b[39m       expect(arg\u001b[33m.\u001b[39mamount)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m       expect(arg\u001b[33m.\u001b[39minitialAmount)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 50 |\u001b[39m       expect(arg\u001b[33m.\u001b[39mminLimit)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m \u001b[33m*\u001b[39m \u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mpayment\u001b[33m.\u001b[39mminLimit\u001b[33m.\u001b[39mpersent)\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m       expect(arg\u001b[33m.\u001b[39mmaxLimit)\u001b[33m.\u001b[39mtoBe(\u001b[35m500\u001b[39m \u001b[33m-\u001b[39m \u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mminNcApiLimit)\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m       \u001b[36mconst\u001b[39m inst \u001b[33m=\u001b[39m \u001b[33mPaymentModel\u001b[39m\u001b[33m.\u001b[39mmock\u001b[33m.\u001b[39minstances[\u001b[35m0\u001b[39m]\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:50:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › list() › повертає список і count через find().sort().skip().limit() та countDocuments()\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"accessId\": \"X\", \"foo\": true}\u001b[39m\n    Received: \u001b[31m{\"foo\": true}\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 177 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 178 |\u001b[39m       \u001b[90m// Перевіряємо лише обовʼязкові поля фільтра\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 179 |\u001b[39m       expect(\u001b[33mPaymentModel\u001b[39m\u001b[33m.\u001b[39mfind)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mobjectContaining(mustHave))\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 180 |\u001b[39m       expect(\u001b[33mPaymentModel\u001b[39m\u001b[33m.\u001b[39mcountDocuments)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mobjectContaining(mustHave))\u001b[22m\n\u001b[2m     \u001b[90m 181 |\u001b[39m       expect(out)\u001b[33m.\u001b[39mtoEqual({ list\u001b[33m:\u001b[39m fakeList\u001b[33m,\u001b[39m count\u001b[33m:\u001b[39m fakeCount })\u001b[22m\n\u001b[2m     \u001b[90m 182 |\u001b[39m     })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:179:33)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Payment.controller","create()"],"duration":8,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m25\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:50:28)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller create() створює запис з правильними лімітами","status":"failed","title":"створює запис з правильними лімітами"},{"ancestorTitles":["Payment.controller","create()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller create() викидає Exception.isExist, якщо refId дублюється","status":"passed","title":"викидає Exception.isExist, якщо refId дублюється"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller refresh() ставить ACTIVE, коли нема інвойсів і баланс > 0","status":"passed","title":"ставить ACTIVE, коли нема інвойсів і баланс > 0"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller refresh() ставить BLOCKED, коли isFreeze = true","status":"passed","title":"ставить BLOCKED, коли isFreeze = true"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller refresh() не викликає NC API для ACTIVE-потоку","status":"passed","title":"не викликає NC API для ACTIVE-потоку"},{"ancestorTitles":["Payment.controller","getMaxAvailable()"],"duration":0,"failureMessages":[],"fullName":"Payment.controller getMaxAvailable() рахує доступний залишок правильно","status":"passed","title":"рахує доступний залишок правильно"},{"ancestorTitles":["Payment.controller","choiceBest()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller choiceBest() повертає null, якщо немає підходящого платежу","status":"passed","title":"повертає null, якщо немає підходящого платежу"},{"ancestorTitles":["Payment.controller","getStatistics()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller getStatistics() агрегація для SUCCESS повертає коректні дані","status":"passed","title":"агрегація для SUCCESS повертає коректні дані"},{"ancestorTitles":["Payment.controller","list()"],"duration":3,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"accessId\": \"X\", \"foo\": true}\u001b[39m\nReceived: \u001b[31m{\"foo\": true}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:179:33)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller list() повертає список і count через find().sort().skip().limit() та countDocuments()","status":"failed","title":"повертає список і count через find().sort().skip().limit() та countDocuments()"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["utils/**/*.js","core/**/*.js","middleware/**/*.js","routes/**/*.js","layers/controllers/**/*.js","layers/models/**/*.js"],"coverageDirectory":"D:\\ncP2P-2\\coverage","coverageProvider":"babel","coverageReporters":["html","text","lcov"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":5,"noStackTrace":false,"nonFlagArgs":["layers/controllers/__tests__/Payment.controller.spec.js"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\ncP2P-2\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"reports/html","filename":"report-2025-06-24T11-36-25-361Z.html","expand":true}]],"rootDir":"D:\\ncP2P-2","runInBand":false,"runTestsByPath":false,"seed":2030794893,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":["layers/controllers/__tests__/Payment.controller.spec.js"],"type":"TestPathPatterns"},"testSequencer":"D:\\ncP2P-2\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750764989392,"_reporterOptions":{"publicPath":"reports/html","filename":"report-2025-06-24T11-36-25-361Z.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})