window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":5,"numPassedTestSuites":0,"numPassedTests":18,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":23,"startTime":1750793907129,"success":false,"testResults":[{"numFailingTests":5,"numPassingTests":18,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750793907690,"loadTestEnvironmentEnd":1750793907415,"loadTestEnvironmentStart":1750793907363,"runtime":273,"setupAfterEnvEnd":1750793907590,"setupAfterEnvStart":1750793907590,"setupFilesEnd":1750793907417,"setupFilesStart":1750793907417,"slow":false,"start":1750793907417},"testFilePath":"D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › closeTail() › оновлює статус на BLOCKED через внутрішнє оновлення refresh\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"BLOCKED\"\u001b[39m\n    Received: \u001b[31m\"ACTIVE\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mcloseTail(\u001b[32m'TAIL123'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'CONFIRM'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 197 |\u001b[39m       \u001b[90m// refresh внутрішньо встановлює status = BLOCKED, бо isTail=true\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 198 |\u001b[39m       expect(pay\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mpayment\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mBLOCKED\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 199 |\u001b[39m       expect(pay\u001b[33m.\u001b[39misTail)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 200 |\u001b[39m       expect(pay\u001b[33m.\u001b[39msave)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[22m\n\u001b[2m     \u001b[90m 201 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoBe(pay)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:198:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › оновлює і повертає оновлений payment при CONFIRM\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"SUCCESS\"\u001b[39m\n    Received: \u001b[31m\"BLOCKED\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 209 |\u001b[39m       \u001b[36mconst\u001b[39m refreshSpy \u001b[33m=\u001b[39m jest\u001b[33m.\u001b[39mspyOn(\u001b[33mPaymentCtrl\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'refresh'\u001b[39m)\u001b[33m.\u001b[39mmockResolvedValue(pay)\u001b[22m\n\u001b[2m     \u001b[90m 210 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mcloseTail(\u001b[32m'TAIL123'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'CONFIRM'\u001b[39m)\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 211 |\u001b[39m       expect(pay\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mpayment\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 212 |\u001b[39m       expect(pay\u001b[33m.\u001b[39misTail)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 213 |\u001b[39m       expect(pay\u001b[33m.\u001b[39msave)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[22m\n\u001b[2m     \u001b[90m 214 |\u001b[39m       expect(refreshSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(pay\u001b[33m.\u001b[39m_id)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:211:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mreject() › ставить REJECT та повертає undefined через внутрішнє refresh на REJECT\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m{\"_id\": \"ID\", \"currentAmount\": NaN, \"isAllValidOk\": false, \"isOneValid\": false, \"isOneWait\": false, \"isRefresh\": true, \"isTail\": false, \"isWait\": true, \"save\": [Function mockConstructor], \"status\": \"BLOCKED\"}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 242 |\u001b[39m       expect(pay\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mpayment\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mREJECT\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 243 |\u001b[39m       expect(pay\u001b[33m.\u001b[39msave)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 244 |\u001b[39m       expect(res)\u001b[33m.\u001b[39mtoBeUndefined()\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 245 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 246 |\u001b[39m   })\u001b[22m\n\u001b[2m     \u001b[90m 247 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:244:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfreeze() › ставить BLOCKED, isFreeze=true і повертає payment\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m2\u001b[39m\n    Received number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 257 |\u001b[39m       expect(pay\u001b[33m.\u001b[39misFreeze)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 258 |\u001b[39m       \u001b[90m// save викликається у freeze і у внутрішньому refresh\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 259 |\u001b[39m       expect(pay\u001b[33m.\u001b[39msave)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m2\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 260 |\u001b[39m       expect(res)\u001b[33m.\u001b[39mtoBe(pay)\u001b[22m\n\u001b[2m     \u001b[90m 261 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 262 |\u001b[39m   })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:259:24)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1munfreeze() › знімає freeze і повертає payment\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m2\u001b[39m\n    Received number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 279 |\u001b[39m       expect(pay\u001b[33m.\u001b[39misFreeze)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 280 |\u001b[39m       \u001b[90m// save викликається у unfreeze та у внутрішньому refresh\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 281 |\u001b[39m       expect(pay\u001b[33m.\u001b[39msave)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m2\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 282 |\u001b[39m       expect(res)\u001b[33m.\u001b[39mtoBe(pay)\u001b[22m\n\u001b[2m     \u001b[90m 283 |\u001b[39m     })\u001b[22m\n\u001b[2m     \u001b[90m 284 |\u001b[39m   })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:281:24)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Payment.controller","create()"],"duration":4,"failureMessages":[],"fullName":"Payment.controller create() створює запис з правильними лімітами","status":"passed","title":"створює запис з правильними лімітами"},{"ancestorTitles":["Payment.controller","create()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller create() викидає Exception.isExist, якщо refId дублюється","status":"passed","title":"викидає Exception.isExist, якщо refId дублюється"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller refresh() ставить ACTIVE, коли нема інвойсів і баланс > 0","status":"passed","title":"ставить ACTIVE, коли нема інвойсів і баланс > 0"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller refresh() ставить BLOCKED, коли isFreeze = true","status":"passed","title":"ставить BLOCKED, коли isFreeze = true"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller refresh() не викликає NC API для ACTIVE-потоку","status":"passed","title":"не викликає NC API для ACTIVE-потоку"},{"ancestorTitles":["Payment.controller","getMaxAvailable()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller getMaxAvailable() рахує доступний залишок правильно","status":"passed","title":"рахує доступний залишок правильно"},{"ancestorTitles":["Payment.controller","choiceBest()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller choiceBest() повертає null, якщо немає підходящого платежу","status":"passed","title":"повертає null, якщо немає підходящого платежу"},{"ancestorTitles":["Payment.controller","getStatistics()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller getStatistics() агрегація для SUCCESS повертає коректні дані","status":"passed","title":"агрегація для SUCCESS повертає коректні дані"},{"ancestorTitles":["Payment.controller","list()"],"duration":2,"failureMessages":[],"fullName":"Payment.controller list() повертає список і count через find().sort().skip().limit() та countDocuments()","status":"passed","title":"повертає список і count через find().sort().skip().limit() та countDocuments()"},{"ancestorTitles":["Payment.controller","pushTail()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller pushTail() throws Exception.cantPushTail if isTail is true","status":"passed","title":"throws Exception.cantPushTail if isTail is true"},{"ancestorTitles":["Payment.controller","pushTail()"],"duration":0,"failureMessages":[],"fullName":"Payment.controller pushTail() throws Exception.cantPushTail if active invoices exist and not all valid","status":"passed","title":"throws Exception.cantPushTail if active invoices exist and not all valid"},{"ancestorTitles":["Payment.controller","pushTail()"],"duration":0,"failureMessages":[],"fullName":"Payment.controller pushTail() calls NC API when valid","status":"passed","title":"calls NC API when valid"},{"ancestorTitles":["Payment.controller","closeTail()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller closeTail() не викликає findOne, якщо status !== \"CONFIRM\"","status":"passed","title":"не викликає findOne, якщо status !== \"CONFIRM\""},{"ancestorTitles":["Payment.controller","closeTail()"],"duration":3,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"BLOCKED\"\u001b[39m\nReceived: \u001b[31m\"ACTIVE\"\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:198:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller closeTail() оновлює статус на BLOCKED через внутрішнє оновлення refresh","status":"failed","title":"оновлює статус на BLOCKED через внутрішнє оновлення refresh"},{"ancestorTitles":["Payment.controller"],"duration":1,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"SUCCESS\"\u001b[39m\nReceived: \u001b[31m\"BLOCKED\"\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:211:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller оновлює і повертає оновлений payment при CONFIRM","status":"failed","title":"оновлює і повертає оновлений payment при CONFIRM"},{"ancestorTitles":["reject()"],"duration":0,"failureMessages":[],"fullName":"reject() повертає null, якщо статус не ACTIVE","status":"passed","title":"повертає null, якщо статус не ACTIVE"},{"ancestorTitles":["reject()"],"duration":0,"failureMessages":[],"fullName":"reject() повертає null, якщо currentAmount ≠ initialAmount","status":"passed","title":"повертає null, якщо currentAmount ≠ initialAmount"},{"ancestorTitles":["reject()"],"duration":2,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m{\"_id\": \"ID\", \"currentAmount\": NaN, \"isAllValidOk\": false, \"isOneValid\": false, \"isOneWait\": false, \"isRefresh\": true, \"isTail\": false, \"isWait\": true, \"save\": [Function mockConstructor], \"status\": \"BLOCKED\"}\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:244:19)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"reject() ставить REJECT та повертає undefined через внутрішнє refresh на REJECT","status":"failed","title":"ставить REJECT та повертає undefined через внутрішнє refresh на REJECT"},{"ancestorTitles":["freeze()"],"duration":1,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m2\u001b[39m\nReceived number of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:259:24)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"freeze() ставить BLOCKED, isFreeze=true і повертає payment","status":"failed","title":"ставить BLOCKED, isFreeze=true і повертає payment"},{"ancestorTitles":["unfreeze()"],"duration":0,"failureMessages":[],"fullName":"unfreeze() повертає null, якщо not frozen","status":"passed","title":"повертає null, якщо not frozen"},{"ancestorTitles":["unfreeze()"],"duration":1,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m2\u001b[39m\nReceived number of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:281:24)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"unfreeze() знімає freeze і повертає payment","status":"failed","title":"знімає freeze і повертає payment"},{"ancestorTitles":["togglePriority()"],"duration":0,"failureMessages":[],"fullName":"togglePriority() перемикає priority і зберігає","status":"passed","title":"перемикає priority і зберігає"},{"ancestorTitles":["sendProofs()"],"duration":1,"failureMessages":[],"fullName":"sendProofs() повертає список підтверджень з правильними link","status":"passed","title":"повертає список підтверджень з правильними link"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["utils/**/*.js","core/**/*.js","middleware/**/*.js","routes/**/*.js","layers/controllers/**/*.js","layers/models/**/*.js","layers/filters/**/*.js","layers/format/**/*.js","layers/serialize/**/*.js","layers/validate/**/*.js"],"coverageDirectory":"D:\\ncP2P-2\\coverage","coverageProvider":"babel","coverageReporters":["html","text","lcov"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":5,"noStackTrace":false,"nonFlagArgs":["layers/controllers/__tests__/Payment.controller.spec.js"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\ncP2P-2\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"reports/html","filename":"report-2025-06-24T19-38-26-660Z.html","expand":true}]],"rootDir":"D:\\ncP2P-2","runInBand":false,"runTestsByPath":false,"seed":477991079,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":["layers/controllers/__tests__/Payment.controller.spec.js"],"type":"TestPathPatterns"},"testSequencer":"D:\\ncP2P-2\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750793907704,"_reporterOptions":{"publicPath":"reports/html","filename":"report-2025-06-24T19-38-26-660Z.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})