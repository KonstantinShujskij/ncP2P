window.jest_html_reporters_callback__({"numFailedTestSuites":1,"numFailedTests":6,"numPassedTestSuites":0,"numPassedTests":3,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":9,"startTime":1750762815960,"success":false,"testResults":[{"numFailingTests":6,"numPassingTests":3,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1750762817793,"loadTestEnvironmentEnd":1750762816266,"loadTestEnvironmentStart":1750762816212,"runtime":1525,"setupAfterEnvEnd":1750762816454,"setupAfterEnvStart":1750762816454,"setupFilesEnd":1750762816268,"setupFilesStart":1750762816268,"slow":false,"start":1750762816268},"testFilePath":"D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js","failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › create() › створює запис з правильними лімітами\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"accessId\": \"A1\", \"amount\": 500, \"author\": \"U1\", \"initialAmount\": 500, \"maxLimit\": 0, \"minLimit\": 500}\u001b[39m\n    Received: \u001b[31m{\"accessId\": \"A1\", \"amount\": 500, \"author\": \"U1\", \"card\": \"0000\", \"course\": 1, \"currentAmount\": 500, \"initialAmount\": 500, \"maxLimit\": 500, \"minLimit\": 500, \"partnerId\": \"P1\", \"refId\": null}\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m       \u001b[90m// PaymentModel це jest.fn(), тому можна перевірити виклик конструктора\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 42 |\u001b[39m       expect(\u001b[33mPaymentModel\u001b[39m)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 43 |\u001b[39m         accessId\u001b[33m:\u001b[39m \u001b[32m'A1'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 44 |\u001b[39m         author\u001b[33m:\u001b[39m  \u001b[32m'U1'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 45 |\u001b[39m         amount\u001b[33m:\u001b[39m  \u001b[35m500\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:42:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › refresh() › SUCCESS коли нема активних інвойсів і currentAmount ≤ 0\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"SUCCESS\"\u001b[39m\n    Received: \u001b[31m\"ACTIVE\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 86 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 87 |\u001b[39m       \u001b[36mconst\u001b[39m out \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mrefresh(\u001b[32m'PAY1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 88 |\u001b[39m       expect(out\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[33mConst\u001b[39m\u001b[33m.\u001b[39mpayment\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 89 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 90 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 91 |\u001b[39m     it(\u001b[32m'BLOCKED коли isFreeze = true'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:88:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › refresh() › BLOCKED коли isFreeze = true\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'forEach')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 |\u001b[39m     \u001b[36mlet\u001b[39m isAllValidOk \u001b[33m=\u001b[39m \u001b[36mtrue\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 63 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 64 |\u001b[39m     invoiceList\u001b[33m.\u001b[39mactive\u001b[33m.\u001b[39mforEach((invoice) \u001b[33m=>\u001b[39m { \u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 65 |\u001b[39m         \u001b[36mif\u001b[39m(invoice\u001b[33m.\u001b[39mstatus \u001b[33m===\u001b[39m \u001b[33mConst\u001b[39m\u001b[33m.\u001b[39minvoice\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mWAIT\u001b[39m) { isOneWait \u001b[33m=\u001b[39m \u001b[36mtrue\u001b[39m } \u001b[22m\n\u001b[2m     \u001b[90m 66 |\u001b[39m         \u001b[36mif\u001b[39m(invoice\u001b[33m.\u001b[39mstatus \u001b[33m===\u001b[39m \u001b[33mConst\u001b[39m\u001b[33m.\u001b[39minvoice\u001b[33m.\u001b[39mstatusList\u001b[33m.\u001b[39m\u001b[33mVALID\u001b[39m) { \u001b[22m\n\u001b[2m     \u001b[90m 67 |\u001b[39m             \u001b[36mif\u001b[39m(\u001b[33m!\u001b[39minvoice\u001b[33m.\u001b[39mvalidOk) { \u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.refresh (\u001b[22m\u001b[2mlayers/controllers/Payment.controller.js\u001b[2m:64:24)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:96:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › refresh() › надсилає виклик до NC API у останній гілці\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"0000\"\u001b[39m, \u001b[32m1000\u001b[39m, \u001b[32m\"PAY1\"\u001b[39m, \u001b[32mAny<Function>\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 108 |\u001b[39m       \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mrefresh(\u001b[32m'PAY1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 109 |\u001b[39m       expect(require(\u001b[32m'@utils/NcApi'\u001b[39m)\u001b[33m.\u001b[39mmakeOrder)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 110 |\u001b[39m         pay\u001b[33m.\u001b[39mcard\u001b[33m,\u001b[39m pay\u001b[33m.\u001b[39mcurrentAmount\u001b[33m,\u001b[39m pay\u001b[33m.\u001b[39m_id\u001b[33m,\u001b[39m expect\u001b[33m.\u001b[39many(\u001b[33mFunction\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 111 |\u001b[39m       )\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 112 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:109:49)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › choiceBest() › повертає null, якщо немає підходящого платежу\u001b[39m\u001b[22m\n\n    Property `getBest` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 |\u001b[39m   describe(\u001b[32m'choiceBest()'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 128 |\u001b[39m     it(\u001b[32m'повертає null, якщо немає підходящого платежу'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 129 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(\u001b[33mPaymentCtrl\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'getBest'\u001b[39m)\u001b[33m.\u001b[39mmockResolvedValue(\u001b[36mnull\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 130 |\u001b[39m       \u001b[36mconst\u001b[39m out \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mchoiceBest(\u001b[35m123\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 131 |\u001b[39m       expect(out)\u001b[33m.\u001b[39mtoBeNull()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 132 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:129:12)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment.controller › list() › віддає список і count через getList\u001b[39m\u001b[22m\n\n    Property `getList` does not exist in the provided object\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 152 |\u001b[39m     it(\u001b[32m'віддає список і count через getList'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m       \u001b[36mconst\u001b[39m mockList \u001b[33m=\u001b[39m { list\u001b[33m:\u001b[39m[{a\u001b[33m:\u001b[39m\u001b[35m1\u001b[39m}]\u001b[33m,\u001b[39m count\u001b[33m:\u001b[39m\u001b[35m2\u001b[39m }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 154 |\u001b[39m       jest\u001b[33m.\u001b[39mspyOn(\u001b[33mPaymentCtrl\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'getList'\u001b[39m)\u001b[33m.\u001b[39mmockResolvedValue(mockList)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 155 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 156 |\u001b[39m       \u001b[36mconst\u001b[39m out \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[33mPaymentCtrl\u001b[39m\u001b[33m.\u001b[39mlist({access\u001b[33m:\u001b[39m\u001b[32m'u'\u001b[39m\u001b[33m,\u001b[39maccessId\u001b[33m:\u001b[39m\u001b[32m'X'\u001b[39m}\u001b[33m,\u001b[39m {}\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[35m3\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 157 |\u001b[39m       expect(out)\u001b[33m.\u001b[39mtoEqual(mockList)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ModuleMocker.spyOn (\u001b[22m\u001b[2mnode_modules/jest-mock/build/index.js\u001b[2m:593:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlayers/controllers/__tests__/Payment.controller.spec.js\u001b[39m\u001b[0m\u001b[2m:154:12)\u001b[22m\u001b[2m\u001b[22m\n","testResults":[{"ancestorTitles":["Payment.controller","create()"],"duration":6,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"accessId\": \"A1\", \"amount\": 500, \"author\": \"U1\", \"initialAmount\": 500, \"maxLimit\": 0, \"minLimit\": 500}\u001b[39m\nReceived: \u001b[31m{\"accessId\": \"A1\", \"amount\": 500, \"author\": \"U1\", \"card\": \"0000\", \"course\": 1, \"currentAmount\": 500, \"initialAmount\": 500, \"maxLimit\": 500, \"minLimit\": 500, \"partnerId\": \"P1\", \"refId\": null}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:42:28)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller create() створює запис з правильними лімітами","status":"failed","title":"створює запис з правильними лімітами"},{"ancestorTitles":["Payment.controller","create()"],"duration":0,"failureMessages":[],"fullName":"Payment.controller create() викидає isExist, якщо refId дублюється","status":"passed","title":"викидає isExist, якщо refId дублюється"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":4,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"SUCCESS\"\u001b[39m\nReceived: \u001b[31m\"ACTIVE\"\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:88:26)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller refresh() SUCCESS коли нема активних інвойсів і currentAmount ≤ 0","status":"failed","title":"SUCCESS коли нема активних інвойсів і currentAmount ≤ 0"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":1,"failureMessages":["TypeError: Cannot read properties of undefined (reading 'forEach')\n    at Object.refresh (D:\\ncP2P-2\\layers\\controllers\\Payment.controller.js:64:24)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:96:19)"],"fullName":"Payment.controller refresh() BLOCKED коли isFreeze = true","status":"failed","title":"BLOCKED коли isFreeze = true"},{"ancestorTitles":["Payment.controller","refresh()"],"duration":1,"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"0000\"\u001b[39m, \u001b[32m1000\u001b[39m, \u001b[32m\"PAY1\"\u001b[39m, \u001b[32mAny<Function>\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:109:49)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"],"fullName":"Payment.controller refresh() надсилає виклик до NC API у останній гілці","status":"failed","title":"надсилає виклик до NC API у останній гілці"},{"ancestorTitles":["Payment.controller","getMaxAvailable()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller getMaxAvailable() правильно рахує доступний залишок","status":"passed","title":"правильно рахує доступний залишок"},{"ancestorTitles":["Payment.controller","choiceBest()"],"duration":0,"failureMessages":["Error: Property `getBest` does not exist in the provided object\n    at ModuleMocker.spyOn (D:\\ncP2P-2\\node_modules\\jest-mock\\build\\index.js:593:13)\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:129:12)\n    at Promise.finally.completed (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1499:10)\n    at _callCircusTest (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1009:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at run (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1920:21)\n    at jestAdapter (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\runner.js:101:19)\n    at runTestInternal (D:\\ncP2P-2\\node_modules\\jest-runner\\build\\index.js:272:16)\n    at runTest (D:\\ncP2P-2\\node_modules\\jest-runner\\build\\index.js:340:7)"],"fullName":"Payment.controller choiceBest() повертає null, якщо немає підходящого платежу","status":"failed","title":"повертає null, якщо немає підходящого платежу"},{"ancestorTitles":["Payment.controller","getStatistics()"],"duration":1,"failureMessages":[],"fullName":"Payment.controller getStatistics() агрегація для SUCCESS повертає правильні суми","status":"passed","title":"агрегація для SUCCESS повертає правильні суми"},{"ancestorTitles":["Payment.controller","list()"],"duration":1,"failureMessages":["Error: Property `getList` does not exist in the provided object\n    at ModuleMocker.spyOn (D:\\ncP2P-2\\node_modules\\jest-mock\\build\\index.js:593:13)\n    at Object.<anonymous> (D:\\ncP2P-2\\layers\\controllers\\__tests__\\Payment.controller.spec.js:154:12)\n    at Promise.finally.completed (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1559:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1499:10)\n    at _callCircusTest (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1009:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:949:3)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:839:13)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at _runTestsForDescribeBlock (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:829:11)\n    at run (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:757:3)\n    at runAndTransformResultsToJestFormat (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\jestAdapterInit.js:1920:21)\n    at jestAdapter (D:\\ncP2P-2\\node_modules\\jest-circus\\build\\runner.js:101:19)\n    at runTestInternal (D:\\ncP2P-2\\node_modules\\jest-runner\\build\\index.js:272:16)\n    at runTest (D:\\ncP2P-2\\node_modules\\jest-runner\\build\\index.js:340:7)"],"fullName":"Payment.controller list() віддає список і count через getList","status":"failed","title":"віддає список і count через getList"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["utils/**/*.js","core/**/*.js","middleware/**/*.js","routes/**/*.js","layers/controllers/**/*.js","layers/models/**/*.js"],"coverageDirectory":"D:\\ncP2P-2\\coverage","coverageProvider":"babel","coverageReporters":["html","text","lcov"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":5,"noStackTrace":false,"nonFlagArgs":["layers/controllers/__tests__/Payment.controller.spec.js"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\ncP2P-2\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"reports/html","filename":"report-2025-06-24T11-00-15-427Z.html","expand":true}]],"rootDir":"D:\\ncP2P-2","runInBand":false,"runTestsByPath":false,"seed":2125861853,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":["layers/controllers/__tests__/Payment.controller.spec.js"],"type":"TestPathPatterns"},"testSequencer":"D:\\ncP2P-2\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1750762817805,"_reporterOptions":{"publicPath":"reports/html","filename":"report-2025-06-24T11-00-15-427Z.html","expand":true,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})